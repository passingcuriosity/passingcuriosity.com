name: Haskell CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.10.3'
        cabal-version: '3.2'

    - name: Dependencies
      run: |
        sudo apt-get install -y --no-install-recommends libjpeg-progs

    - name: Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-cabal
      with:
        path: |
          ~/.cabal
          ~/.cache/cabal
          ~/.ghc
          ~/.local/bin
          ~/.local/state/cabal
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        cabal update
        cabal build --only-dependencies --enable-tests --enable-benchmarks

    - name: Compile
      run: cabal build

    - name: Build
      run: |
        cabal exec site build
    
    - name: Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: site-files
        path: _site
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Dependencies
        run: |
          sudo apt-get install -y --no-install-recommends awscli

      - name: Artifacts
        uses: actions/download-artifact@v3
        with:
          name: site-files
          path: _site

      - name: Publish
        run: |
          aws s3 sync _site/ s3://passingcuriosity.com/ \
            --acl public-read \
            --cache-control public \
            --delete
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: CDN
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E3SR8FZXHQKSCN \
            --paths "*"
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
